CREATE TABLE IF NOT EXISTS account
(id_account SERIAL PRIMARY KEY, nick TEXT, password TEXT, admin BOOLEAN);

CREATE TABLE IF NOT EXISTS conversation
(id_conversation SERIAL PRIMARY KEY, id_receiver INTEGER, id_sender INTEGER,
FOREIGN KEY(id_sender) REFERENCES account (id_account),
FOREIGN KEY(id_receiver) REFERENCES account (id_account));

CREATE TABLE IF NOT EXISTS message
(id_message SERIAL PRIMARY KEY, receiver_sender TEXT, content TEXT, time TEXT, is_read BOOLEAN,
id_conversation INTEGER, FOREIGN KEY(id_conversation) REFERENCES conversation (id_conversation));


--register_new_user
insert into account (id_account, nick, password,admin) values (4, 'Pati', 'pass1', True) returning id_account;

--show_list_users && check_user_exists
select a.nick from account a;

--show_base_info_about & maybe login
select a.nick, a."password", a."admin" from account a;

--show_conversation
select m.receiver_sender, m."content", m."time"  from account a
inner join conversation c on (c.id_receiver = a.id_account)
inner join message m on m.id_conversation = c.id_conversation
where c.id_sender = 1 and c.id_receiver = 2
order by m."time" asc;

--sort_messages_by_date
--count messages from other users
-- DOIT

--check_unread_messages -> COUNT
select a.nick as receiver, (select nick from account, conversation
where account.id_account = conversation.id_sender and
c.id_sender = conversation.id_sender) as sender, m.receiver_sender, m."content", m.is_read  from account a
inner join conversation c on a.id_account = c.id_receiver
inner join message m on m.id_conversation = c.id_conversation
where (c.id_receiver = (select aa.id_account from account aa where aa.nick = 'Seba') and
m.receiver_sender = 'send_to_receiver') or c.id_sender  = (select aa.id_account from account aa where aa.nick = 'Seba') and
m.receiver_sender = 'from_receiver';


-- m.from_receiver odnosi sie do c.receiver i viceversa








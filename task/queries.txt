CREATE TABLE IF NOT EXISTS account
(id_account SERIAL PRIMARY KEY, nick TEXT, password TEXT, admin BOOLEAN);

CREATE TABLE IF NOT EXISTS conversation
(id_conversation SERIAL PRIMARY KEY, id_receiver INTEGER, id_sender INTEGER,
FOREIGN KEY(id_sender) REFERENCES account (id_account),
FOREIGN KEY(id_receiver) REFERENCES account (id_account));

CREATE TABLE IF NOT EXISTS message
(id_message SERIAL PRIMARY KEY, receiver_sender TEXT, content TEXT, time TEXT, is_read BOOLEAN,
id_conversation INTEGER, FOREIGN KEY(id_conversation) REFERENCES conversation (id_conversation));


--register_new_user
insert into account (id_account, nick, password,admin) values (4, 'Pati', 'pass1', True) returning id_account;

--show_list_users && check_user_exists
select a.nick from account a;

--show_base_info_about & maybe login
select a.nick, a."password", a."admin" from account a;

--show_conversation
select m.receiver_sender, m."content", m."time"  from account a
inner join conversation c on (c.id_receiver = a.id_account)
inner join message m on m.id_conversation = c.id_conversation
where c.id_sender = 1 and c.id_receiver = 2
order by m."time" asc;

--sort_messages_by_date
--count messages from other users
-- DOIT

--check_unread_messages -> COUNT
select a.nick, (select aa.nick as _from from
account aa
where aa.id_account = (select case
	when cc.id_receiver = a.id_account then cc.id_sender
	else cc.id_receiver
end as return_value
from conversation cc
where cc.id_conversation = c.id_conversation)), count(m.is_read is null) as unread_messages
from account a, conversation c
inner join message m on m.id_conversation = c.id_conversation
where (a.nick = 'Seba' and ((c.id_receiver = a.id_account and m.receiver_sender = 'send_to_receiver')
or (c.id_sender = a.id_account and m.receiver_sender = 'from_receiver')) and m.is_read = False)
group by a.nick, _from;


-- read_unread_messages -> SHOW
select a.nick, c.id_conversation, (select aa.nick as _from from
account aa
where aa.id_account = (select case
	when cc.id_receiver = a.id_account then cc.id_sender
	else cc.id_receiver
end as return_value
from conversation cc
where cc.id_conversation = c.id_conversation)),
m."content" as unread_message
from account a, conversation c
inner join message m on m.id_conversation = c.id_conversation
where (a.nick = 'Seba' and ((c.id_receiver = a.id_account and m.receiver_sender = 'send_to_receiver')
or (c.id_sender = a.id_account and m.receiver_sender = 'from_receiver')) and m.is_read = FALSE)
order by c.id_conversation;



-- m.from_receiver odnosi sie do c.receiver i viceversa







